generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model User {
  id            String            @id @default(uuid())
  name          String
  email         String            @unique
  image         String?
  emailVerified DateTime?
  password      String?
  accounts      Account[]
  assignedTests AssignedTest[]
  testSessions  UserTestSession[]
  test          Test[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Test {
  id            String            @id @default(uuid())
  name          String
  position      String
  date          DateTime 
  durationMin   Int
  userId        String
  
  groups        Group[]
  assignedTests AssignedTest[]
  testSessions  UserTestSession[]
  testQuestions TestQuestion[]
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model AssignedTest {
  id              String   @id @default(uuid())
  userId          String
  testId          String
  loginToken      String?
  assignedAt      DateTime @default(now())
  credentialsSent Boolean  @default(false)

  user            User     @relation(fields: [userId], references: [id])
  test            Test     @relation(fields: [testId], references: [id])
}

model UserTestSession {
  id          String       @id @default(uuid())
  userId      String
  testId      String
  startedAt   DateTime
  endedAt     DateTime?
  submitted   Boolean      @default(false)
  totalScore  Float        @default(0)
  userAnswers UserAnswer[]

  test        Test         @relation(fields: [testId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
}

model Group {
  id        String     @id @default(uuid())
  name      String
  testId    String
  questions Question[]

  test      Test       @relation(fields: [testId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionType {
  MCQ
  TEXT
}

model Question {
  id            String         @id @default(uuid())
  groupId       String
  text          String
  type          QuestionType
  score         Int
  correct       Int? // MCQ only
  choices       Choice[]
  userAnswers   UserAnswer[]
  testQuestions TestQuestion[]

  group         Group          @relation(fields: [groupId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Choice {
  id         String   @id @default(uuid())
  text       String
  index      Int // Unique index to match against correct answer
  questionId String

  question   Question @relation(fields: [questionId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model TestQuestion {
  id         String   @id @default(uuid())
  testId     String
  questionId String
  order      Int // Optional: order in test

  test       Test     @relation(fields: [testId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  createdAt DateTime @default(now())
}


model UserAnswer {
  id            String          @id @default(uuid())
  testSessionId String
  questionId    String
  response      String // For MCQ: choice index as string; for TEXT: answer
  autoScore     Float? // For MCQ
  givenScore    Float? // For TEXT (manual evaluation)

  testSession   UserTestSession @relation(fields: [testSessionId], references: [id])
  question      Question        @relation(fields: [questionId], references: [id])

  createdAt DateTime @default(now())
}
